diff --git a/lisp/Makefile b/lisp/Makefile
index 6f75c6a..dc010d7 100755
--- a/lisp/Makefile
+++ b/lisp/Makefile
@@ -57,7 +57,7 @@ COMPILE =  -f batch-byte-compile
 DTK_OBJECTS = acss-structure.elc \
 dtk-speak.elc		dectalk-voices.elc\
 outloud-voices.elc multispeech-voices.elc \
-espeak-voices.elc dtk-interp.elc
+espeak-voices.elc dtk-interp.elc dtk-unicode.elc
 
 SPEAK_OBJECTS =   \
 	emacspeak-speak.elc  \
@@ -277,7 +277,8 @@ emacspeak-cus-load.el: force
 #Modules using functions from the dtk module should depend on dtk-speak
 
 dtk-interp.elc: dtk-interp.el
-dtk-speak.elc: dtk-speak.el  dtk-interp.elc
+dtk-unicode.elc: dtk-unicode.el
+dtk-speak.elc: dtk-speak.el  dtk-interp.elc dtk-unicode.elc
 acss-structure.elc: acss-structure.el
 dectalk-voices.elc: dectalk-voices.el voice-setup.elc
 outloud-voices.elc: outloud-voices.el voice-setup.elc
diff --git a/lisp/dtk-speak.el b/lisp/dtk-speak.el
index 485a49a..dcd3674 100644
--- a/lisp/dtk-speak.el
+++ b/lisp/dtk-speak.el
@@ -56,10 +56,12 @@
 (require 'backquote)
 (require 'custom)
 (require 'dtk-interp)
+(require 'dtk-unicode)
 (require 'dectalk-voices)
 (require 'outloud-voices)
 (require 'multispeech-voices)
 (require 'espeak-voices)
+(require 'flite-voices)
 
 ;;}}}
 ;;{{{  user customizations:
@@ -1517,9 +1519,10 @@ available TTS servers.")
 (defsubst dtk-char-to-speech (char)
   "Translate CHAR to speech string."
   (declare (special dtk-character-to-speech-table))
-  (if (> char 127 )
-      (format "octal %o"  char )
-    (aref dtk-character-to-speech-table char )))
+  (if  (eq (char-charset char) 'ascii)
+	  (aref dtk-character-to-speech-table char )
+	(or (dtk-unicode-short-name-for-char char)
+		 (format "octal %o"  char ))))
 
 ;;}}}
 ;;{{{  interactively selecting the server:
@@ -1545,6 +1548,8 @@ This is setup on a per engine basis.")
     (espeak-configure-tts))
    ((string-match "dtk-" tts-name)      ;all dectalks
     (dectalk-configure-tts))
+   ((string-match "eflite" tts-name)
+	(flite-configure-tts))
    (t (dectalk-configure-tts)           ; will become
                                         ; generic-configure)))
       ))
@@ -1770,6 +1775,7 @@ only speak upto the first ctrl-m."
           (when pronunciation-table
             (tts-apply-pronunciations
              pronunciation-table))
+		  (dtk-unicode-replace-chars mode)
           (dtk-handle-repeating-patterns mode)
           (dtk-quote mode))
         (goto-char (point-min))
diff --git a/lisp/dtk-unicode.el b/lisp/dtk-unicode.el
new file mode 100644
index 0000000..b7a2e8b
--- /dev/null
+++ b/lisp/dtk-unicode.el
@@ -0,0 +1,258 @@
+;;; dtk-unicode.el --- Pronounce more characters correctly
+
+;; Copyright 2007 Lukas Loehrer
+;;
+;; Author: Lukas Loehrer <loehrerl |at| gmx.net>
+;; Version: $Id: dtk-unicode.el,v 0.0 2007/09/24 09:15:24 luke Exp $
+;; Keywords: 
+;; X-URL: not distributed yet
+
+;; This program is free software; you can redistribute it and/or modify
+;; it under the terms of the GNU General Public License as published by
+;; the Free Software Foundation; either version 2, or (at your option)
+;; any later version.
+;;
+;; This program is distributed in the hope that it will be useful,
+;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;; GNU General Public License for more details.
+;;
+;; You should have received a copy of the GNU General Public License
+;; along with this program; if not, write to the Free Software
+;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+
+;;; Commentary:
+
+;; 
+
+;; Put this file into your load-path and the following into your ~/.emacs:
+;;   (require 'dtk-unicode)
+
+;;; Code:
+
+(require 'cl)
+(require 'descr-text)
+
+;;{{{Customization
+
+(defgroup dtk-unicode
+  nil
+  "Customization group for dtk-unicode."
+  :group 'emacspeak
+  :prefix "dtk-unicode-")
+
+(defcustom dtk-unicode-character-replacement-alist
+  '(
+	(?“ . "\"")
+	(?” . "\"")
+	(?⋆ . "*")
+	(?‘ . "'")
+	(?’ . "'")
+	(?– . "--")
+	(?— . "--")
+	(?― . "----") ; horizontal bar
+	(?‖ . "||")
+	(?… . "...")
+	(?• . "*") ; bullet
+	(?™ . "TM") ; trademark
+	)
+  "Explicit replacements for some characters."
+  :group 'dtk-unicode
+  :type '(alist
+		  :key-type (character :tag "character")
+		   :value-type (string :tag "replacement"))
+		   )
+
+(defcustom dtk-unicode-name-transformation-rules-alist
+  '(
+	("^greek\\( small\\| capital\\)? letter \\(.*\\)$" .  (lambda (s) (match-string 2 s)))
+	("\\(.*\\) sign$" . (lambda (s) (match-string 1 s)))
+	)
+  "Alist of character name transformation rules."
+  :group 'dtk-unicode
+  :type '(repeat (cons :value ("." . identity)
+				 (regexp :tag "pattern")
+				 (function :tag "transformation")))
+  )
+
+;;}}}
+
+;;{{{Variables
+
+
+
+
+(defvar dtk-unicode-untouched-charsets
+  '(ascii latin-iso8859-1)
+  "*Characters of these charsets are completely ignored by dtk-unicode-replace-chars.")
+
+(defvar dtk-unicode-handlers
+  '(dtk-unicode-user-table-handler dtk-unicode-full-table-handler)
+  "List of functions which are called in in this order for replacing an unspeakable character.
+
+A handler returns a non-nil value if the   replacement was successful, nil otherwise.")
+
+;;}}}
+
+;;{{{Helper functions
+
+(defun dtk-unicode-charset-limits (charset)
+  "Return rough lower and upper limits for character codes in CHARSET."
+  (cond
+   ((eq charset 'ascii)
+	(list 0 127))
+   ((eq charset 'eight-bit-control)
+	(list 128 159))
+   ((eq charset 'eight-bit-graphic)
+	(list 160 255))
+   (t
+	(let* ((dim (charset-dimension charset))
+		   (chars (charset-chars charset))
+		   min max)
+	  (if (eq chars 96)
+		  (setq min 32 max 127)
+		(setq min 33 max 126))
+	  (list (make-char charset min min) (make-char charset max max))))))
+	  
+(defun dtk-unicode-build-skip-regexp ()
+  "Construct regexp to match all but the characters in dtk-unicode-untouched-charsets."
+  (format "[^%s]"
+		  (loop for charset in dtk-unicode-untouched-charsets
+				when (charsetp charset)
+				concat (apply 'format "%c-%c" (dtk-unicode-charset-limits charset)))))
+
+(defvar dtk-unicode-charset-filter-regexp
+  (dtk-unicode-build-skip-regexp)
+  "Regular exppression that matches characters not in dtk-unicode-untouched-charsets.")
+
+(defun dtk-unicode-update-untouched-charsets (charsets)
+  "Update list of charsets we will not touch."
+  (setq dtk-unicode-untouched-charsets charsets)
+  (setq dtk-unicode-charset-filter-regexp (dtk-unicode-build-skip-regexp)))
+
+(defvar dtk-unicode-cache (make-hash-table)
+  "Cache for unicode data lookups.")
+
+(defadvice describe-char-unicode-data (around dtk-unicode pre act)
+  "Cache result."
+  (let* ((char (ad-get-arg 0))
+		 (result (gethash char dtk-unicode-cache 'not-found)))
+	(if (eq result 'not-found)
+		(progn
+		  ad-do-it
+		  (puthash char ad-return-value dtk-unicode-cache))
+	  (setq ad-return-value result))))
+		  
+(defun dtk-unicode-name-for-char (char)
+  "Return unicode name for character CHAR.
+
+nil if CHAR is not in Unicode."
+  (let* ((unicode (encode-char char 'ucs))
+		 (char-desc (and unicode (condition-case nil
+									 (let ((emacspeak-speak-cue-errors nil))
+									   (describe-char-unicode-data unicode))
+								   (error nil)))))
+	(when char-desc
+	  (downcase (cadr (assoc "Name" char-desc))))))
+
+(defsubst dtk-unicode-apply-name-transformation-rules (name)
+  "Apply transformation rules in dtk-unicode-simplification-rules-alist to NAME."
+  (funcall
+   (or (assoc-default name dtk-unicode-name-transformation-rules-alist 'string-match)
+	   'identity)
+   name))
+
+(defun dtk-unicode-uncustomize-char (char)
+  "Delete custom replacement for CHAR.
+
+When called interactively, CHAR defaults to the character after point."
+  (interactive (list (following-char)))
+  (setq dtk-unicode-character-replacement-alist
+		(loop for elem in dtk-unicode-character-replacement-alist
+			  unless (eq (car elem) char) collect elem)))
+
+(defun dtk-unicode-customize-char (char replacement)
+  "Add a custom replacement string for CHAR.
+
+When called interactively, CHAR defaults to the character after point."
+  (interactive
+   (let ((char (following-char)))
+	 (list char
+		   (read-string
+			(format "Replacement for %c (0x%x) from charset %s: " char char (char-charset char))))))
+  (push (cons char replacement) dtk-unicode-character-replacement-alist))
+
+;;}}}
+
+;;{{{Character replacement handlers
+
+(defun dtk-unicode-user-table-handler (char pos)
+  "Return user defined replacement character if it exists."
+  (let ((replacement (cdr (assq char dtk-unicode-character-replacement-alist))))
+	replacement))
+
+(defun dtk-unicode-full-table-handler (char pos)
+  "Uses the unicode data file to find the name of CHAR."
+  (let ((char-desc (dtk-unicode-name-for-char char)))
+	(when char-desc
+	  (format  " %s " (dtk-unicode-apply-name-transformation-rules char-desc)))))
+
+;;}}}
+
+;;{{{External interface
+
+(defun dtk-unicode-full-name-for-char (char)
+  "Return full name of CHAR.
+
+This is meant to be used in places where the user asks for a detailed description of CHAR."
+  (dtk-unicode-name-for-char char))
+
+(defun dtk-unicode-short-name-for-char (char)
+  "Return name of CHAR.
+
+This is meant to be used in places where the user asks for a short description of CHAR."
+  (if (memq char dtk-unicode-untouched-charsets)
+	  (char-to-string char)
+	(dtk-unicode-name-for-char char)))
+
+(defun dtk-unicode-replace-chars (mode)
+  "Replace unicode characters in current buffer with something more TTS friendly.
+
+This is the main entry point for this module.
+The argument MODE specifies the current punctuation mode.
+Does nothing for unibyte buffers."
+  (when enable-multibyte-characters
+	(let ((inhibit-read-only t))
+	  (goto-char (point-min))
+	  (while (re-search-forward dtk-unicode-charset-filter-regexp  nil t)
+		(let* ((pos (match-beginning 0))
+			   (char (char-after pos))
+			   (replacement (save-match-data (run-hook-with-args-until-success 'dtk-unicode-handlers char pos))))
+		  (when replacement
+			(let ((props (text-properties-at pos)))
+			  (replace-match replacement t t nil)
+			  (when props
+				(set-text-properties pos (point) props)))))))))
+				
+(defun unicode-name-at (pos)
+  (interactive "d")
+  (let* ((char (char-after pos)))
+	(message "%s" (downcase (or
+							 (dtk-unicode-full-name-for-char char)
+							 "Unknown character")))))
+
+;;}}}
+
+(provide 'dtk-unicode)
+
+;;{{{  emacs local variables
+
+;;; local variables:
+;;; coding: utf-8
+;;; folded-file: t
+;;; byte-compile-dynamic: t
+;;; end:
+
+;;}}}
+
+;;; dtk-unicode.el ends here
diff --git a/lisp/emacspeak-speak.el b/lisp/emacspeak-speak.el
index 007a617..46ea8d4 100644
--- a/lisp/emacspeak-speak.el
+++ b/lisp/emacspeak-speak.el
@@ -963,7 +963,8 @@ spelt instead of being spoken."
 
 (defsubst emacspeak-is-alpha-p (c)
   "Check if argument C is an alphabetic character."
-  (= 119 (char-syntax c)))
+  (and (= ?w (char-syntax c))
+	   (memq (char-charset c) dtk-unicode-untouched-charsets)))
 
 ;;{{{  phonemic table
 
@@ -1040,6 +1041,7 @@ char is assumed to be one of a--z."
   (let ((char-string   (char-to-string char )))
     (or   (cdr
            (assoc char-string emacspeak-char-to-phonetic-table ))
+		  (dtk-unicode-full-name-for-char char)
           " ")))
 
 ;;}}}
@@ -1054,9 +1056,7 @@ Pronounces character phonetically unless  called with a PREFIX arg."
        ((and (not prefix)
              (emacspeak-is-alpha-p char))
         (dtk-speak (emacspeak-get-phonetic-string char )))
-       ((emacspeak-is-alpha-p char) (dtk-letter (char-to-string char )))
-       (t (dtk-dispatch
-           (dtk-char-to-speech char )))))))
+	   (t (emacspeak-speak-this-char char))))))
 
 (defun emacspeak-speak-this-char (char)
   "Speak this CHAR."
diff --git a/lisp/espeak-voices.el b/lisp/espeak-voices.el
index 3802244..7c1ef2a 100644
--- a/lisp/espeak-voices.el
+++ b/lisp/espeak-voices.el
@@ -459,6 +459,20 @@ and TABLE gives the values along that dimension."
 ;;}}}
 ;;{{{ Configurater 
 
+(defvar espeak-character-to-speech-table nil
+  "Table that records how ISO ascii characters are spoken.")
+
+(defun espeak-setup-character-to-speech-table ()
+  (when (and (null espeak-character-to-speech-table)
+			 (boundp 'dtk-character-to-speech-table)
+			 (vectorp dtk-character-to-speech-table))
+	(setq espeak-character-to-speech-table
+		  (let ((table (copy-seq dtk-character-to-speech-table)))
+			(loop for entry across-ref table 
+				  when   (string-match "\\(\\[\\*\\]\\)"  entry) do
+				  (setf entry (replace-match " " nil nil  entry 1)))
+			table))))
+
 (defun espeak-configure-tts ()
   "Configure TTS environment to use eSpeak."
   (declare (special tts-default-speech-rate
@@ -471,7 +485,9 @@ and TABLE gives the values along that dimension."
   (fset 'tts-define-voice-from-speech-style 'espeak-define-voice-from-speech-style)
   (setq tts-default-voice nil)
   (setq tts-default-speech-rate espeak-default-speech-rate)
-  (set-default 'tts-default-speech-rate espeak-default-speech-rate))
+  (set-default 'tts-default-speech-rate espeak-default-speech-rate)
+  (espeak-setup-character-to-speech-table)
+  (dtk-unicode-update-untouched-charsets '(ascii latin-iso8859-1)))
 
 ;;}}}
 (provide 'espeak-voices)
diff --git a/lisp/flite-voices.el b/lisp/flite-voices.el
index aec69be..19e4aa7 100644
--- a/lisp/flite-voices.el
+++ b/lisp/flite-voices.el
@@ -1,4 +1,4 @@
-;;; flite.el --- Emacspeak FLite
+;;; flite-voices.el --- Emacspeak FLite
 ;;; $Id$
 ;;; $Author$
 ;;; Description:  FLite interface 
@@ -65,6 +65,10 @@
     (tts-restart)
     (message "This is Emacspeak! ")))
 
+(defun flite-configure-tts ()
+  (dectalk-configure-tts)
+  (dtk-unicode-update-untouched-charsets '(ascii latin-iso8859-1 eight-bit-graphic)))
+
 ;;}}}
 
 (provide 'flite-voices)
diff --git a/lisp/outloud-voices.el b/lisp/outloud-voices.el
index 330a585..738557a 100644
--- a/lisp/outloud-voices.el
+++ b/lisp/outloud-voices.el
@@ -448,14 +448,16 @@ and TABLE gives the values along that dimension."
 (defun outloud-configure-tts ()
   "Configure TTS environment to use ViaVoice  family of synthesizers."
   (declare (special tts-default-speech-rate
-                    outloud-default-speech-rate))
+                    outloud-default-speech-rate
+					dtk-speaker-process))
   (fset 'tts-list-voices'outloud-list-voices)
   (fset 'tts-voice-defined-p 'outloud-voice-defined-p)
   (fset 'tts-get-voice-command 'outloud-get-voice-command)
   (fset 'tts-define-voice-from-speech-style 'outloud-define-voice-from-speech-style)
   (setq tts-default-speech-rate outloud-default-speech-rate)
   (set-default 'tts-default-speech-rate
-               outloud-default-speech-rate))
+               outloud-default-speech-rate)
+  (dtk-unicode-update-untouched-charsets '(ascii latin-iso8859-1 latin-iso8859-15 latin-iso8859-9 eight-bit-graphic)))
 
 ;;}}}
 (provide 'outloud-voices)
