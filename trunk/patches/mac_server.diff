Index: servers/mac
===================================================================
--- servers/mac	(revision 0)
+++ servers/mac	(revision 0)
@@ -0,0 +1,481 @@
+#!/usr/bin/python2.6
+# E-Mac-Speak
+# Emacspeak on Mac.
+# author: David Tseng
+# author: Bart Bunting
+
+import aifc
+import math
+import os
+import re
+import sys
+import threading
+
+from Foundation import *
+from PyObjCTools import AppHelper
+from AppKit import NSObject
+from AppKit import NSSound
+from AppKit import NSSpeechSynthesizer
+
+# Globals.
+ttsState = {}
+
+# amount to increase pitch of capital letters.  This may need tweaking. 
+capsPitchIncrease = 8
+
+# Debug level
+# 0 means no debug output is written 10 is maximum output
+debugLevel = 0
+
+# Should debug output also be written to STDOUT?
+debugToSTDOUT = 0
+
+# A debug file to place sample tts text sent by emacspeak.
+if debugLevel > 0:
+  DEBUGFILE = open("/tmp/speech.log","w")
+
+# global speech rate
+ttsState['speechRate'] = 500
+ttsState['charFactor'] = 1.8
+ttsState['sayRate'] = round(ttsState['speechRate'] * ttsState['charFactor'])
+# set capitalize to off initialy
+ttsState['capitalize'] = 0
+
+# Possible levels of punctuation (none, some, all).
+ttsState['punctuationLevel'] = 'none'
+
+# used to pronounce punctuation chars
+punctuationNamesMap= {'$':'dollar',
+                 '#':'pound', 
+                 '-':'dash',
+                 '"':'quote',
+	         '(':'leftParen',
+                 ')':'rightParen',
+                 '*':'star',
+                 ';':'semi',
+                 ':':'colon',
+                 '<':'less than',
+                 '>':'greater than',
+                 '\n':'new line',
+                 '\\':'backslash',
+                 '/':'slash',
+                 '+':'plus',
+                 '=':'equals',
+                 '\'':'apostrophe',
+                 '~':'tilda',
+                 '`':'backquote',
+                 '!':'exclamation',
+                 '@':'at',
+                 '.':'dot',
+                 ',':'comma'}
+
+punctuationMap = {'none': ('$'),
+                  'some': ('$', '#', '-', '"', '(', ')', '*', ';', ':', '<', '>', '\n', '\\', '/', '+', '=', '~', '`', '!'),
+                  'all': ('$', '#', '-', '"', '(', ')', '*', ';', ':', '<', '>', '\n', '\\', '/', '+', '=', '\'', '~', '`', '!', '@', '.', ',')}
+
+# map voice short names to apple class names.
+voiceMap= {'alex':'com.apple.speech.synthesis.voice.Alex',
+           'victoria':'com.apple.speech.synthesis.voice.Victoria',
+           'vicki':'com.apple.speech.synthesis.voice.Vicki',
+           'ralf':'com.apple.speech.synthesis.voice.Ralph',
+           'kathy':'com.apple.speech.synthesis.voice.Kathy',
+           'junior':'com.apple.speech.synthesis.voice.Junior',
+           'fred':'com.apple.speech.synthesis.voice.Fred',
+           'bruce':'com.apple.speech.synthesis.voice.Bruce'}
+
+# A queue of either text or audio filenames waiting to be dispatched to NSSpeechSynthesizer.
+speechQueue = []
+
+# Lock access to specific speech synthesis paths.
+speechLock = threading.Lock()
+
+"""
+  Helper for consuming callbacks from NSSpeechSynthesizer.
+"""
+class SpeechSynthesizerDelegate(NSObject):
+
+  def speechSynthesizer_didFinishSpeaking_(self, synthesizer, success):
+    processSpeechQueue()
+
+  def speechSynthesizer_didEncounterErrorAtIndex_ofString_message_(self, synthesizer, index, text, message):
+    #writeDebugLog(2, "error encountered in synth: " + message + " at index " + str(index) + " of string '" + text + "'\n")
+    writeDebugLog(2, "error encountered in synth: index " + str(index) + " of string '" + text + "'\n")
+
+  def speechSynthesizer_didEncounterSyncMessage_(self, synthesizer, message):
+    #writeDebugLog(2, "sync " + int(message) + "\n")
+    writeDebugLog(2, "sync\n")
+    # FIXME this must surely be wrong, how can we have this not enstanciate a new protocolhandler each time?
+    p = ProtocolHandler()
+    p.handleTone("500 30")
+
+
+speechSynthesizer = NSSpeechSynthesizer.alloc().init()
+delegate_ = SpeechSynthesizerDelegate.alloc().init();
+speechSynthesizer.setRate_(ttsState['speechRate'])
+speechSynthesizer.setDelegate_(delegate_)
+
+"""
+  An object which observes stdin.
+  This class largely contains basic i/o for reading from stdin using
+  NSNotificationCenter..
+"""
+class FileObserver(NSObject):
+  def initWithFileDescriptor_readCallback_errorCallback_(self,
+      fileDescriptor, readCallback, errorCallback):
+    self = self.init()
+    self.readCallback = readCallback
+    self.errorCallback = errorCallback
+    self.fileHandle = NSFileHandle.alloc().initWithFileDescriptor_(
+      fileDescriptor)
+    self.nc = NSNotificationCenter.defaultCenter()
+    self.protocolHandler = ProtocolHandler()
+    self.nc.addObserver_selector_name_object_(
+      self,
+      'fileHandleReadCompleted:',
+      NSFileHandleReadCompletionNotification,
+      self.fileHandle)
+    self.fileHandle.readInBackgroundAndNotify()
+    return self
+
+  def fileHandleReadCompleted_(self, aNotification):
+    ui = aNotification.userInfo()
+    newData = ui.objectForKey_(NSFileHandleNotificationDataItem)
+    if newData is None:
+      if self.errorCallback is not None:
+        self.errorCallback(self, ui.objectForKey_(NSFileHandleError))
+      self.close()
+    else:
+      self.fileHandle.readInBackgroundAndNotify()
+      if self.readCallback is not None:
+        self.readCallback(self, str(newData))
+
+  def close(self):
+    self.nc.removeObserver_(self)
+    if self.fileHandle is not None:
+      self.fileHandle.closeFile()
+      self.fileHandle = None
+    # break cycles in case these functions are closed over
+    # an instance of us
+    self.readCallback = None
+    self.errorCallback = None
+
+  def __del__(self):
+    # Without this, if a notification fires after we are GC'ed
+    # then the app will crash because NSNotificationCenter
+    # doesn't retain observers.  In this example, it doesn't
+    # matter, but it's worth pointing out.
+    self.close()
+
+# This is conceptually the main entry point of the server.
+def gotLine(observer, aLine):
+  if aLine:
+    writeDebugLog(2, "gotline: " + aLine.rstrip() +  "\nend\n")
+    observer.protocolHandler.dispatchRawTtsMessage(aLine.rstrip())
+  else:
+    AppHelper.stopEventLoop()
+
+def gotError(observer, err):
+  print "error:", err
+  AppHelper.stopEventLoop()
+
+def writeDebugLog(level, output):
+  # do nothing if debug is off
+  if debugLevel == 0:
+    return
+
+  if level <= debugLevel:
+    if output:
+      DEBUGFILE.write(output)
+      # Write debug messages to STDOUT if requested as well
+      if debugToSTDOUT:
+        print output + "\n"
+    DEBUGFILE.flush()
+
+
+# Object that implements the Emacspeak TTS protocol.
+class ProtocolHandler:
+  def __init__(self):
+    # Maps a protocol id to a handler function.
+    self.protocolIdToHandlerMap = { 'd':self.handleDispatch,
+                                    'a':self.handleAuditoryIcon,
+                                    'l':self.handleLetter,
+                                    'q':self.handleQueue,
+                                    's':self.handleStopSpeaking,
+                                    't':self.handleTone,
+                                    'tts_say':self.handleTtsSay,
+                                    'tts_sync_state':self.handleTtsSyncState,
+                                    'tts_set_punctuations':self.handleTtsSetPunctuations,
+                                    'tts_set_speech_rate':self.handleTtsSetSpeechRate,
+                                    'tts_set_character_scale':self.handleTtsSetCharacterScale }
+
+    # Used to extract protocol id and args from a raw message.
+    self.protocolRePattern = (
+      r"((?P<blockId>[a-z\-]*) {(?P<blockArg>[\s\S]*))|((?P<spaceId>[a-z_]*) (?P<spaceArg>[\s\S]*))|(?P<id>[a-z_]*)")
+    # Used to detect multiple dispatches during processing of one chunk set.
+    self.isProcessing = False
+    # Hack to get multiline q's working.
+    self.queueContinuationValue = ""
+    self.isQueueContinuation = False
+
+  # Protocol Handlers.
+  def handleDispatch(self, args):
+    # sometimes we receive multiple dispatches within the same chunks set.
+    if not self.isProcessing:
+      processSpeechQueue()
+      self.isProcessing = True
+
+
+  # Play an auditory icon.
+  # There may be a better way of doing this
+  # Currently we play the icon as soon as we receive it which produces the best results.
+  def handleAuditoryIcon(self, args):
+    writeDebugLog(6, "Auditory icon " + args + "\n")
+    if args:
+      NSSound.alloc().initWithContentsOfFile_byReference_(args, True).play()
+
+  def handleLetter(self, args):
+    output = args.strip(" }")
+
+    prefix = "[[rate " + str(ttsState['sayRate']) + "]]"
+    suffix = "[[rate " + str(ttsState['speechRate']) + "]]"
+
+    writeDebugLog(4, "Letter: " + output + "\n")
+    self.handleStopSpeaking(None)
+
+    # punctuation processing, we want to speak all punctuation if it is a single letter so just match against the punctuationNamesMap
+    if output in punctuationNamesMap:
+      output = punctuationNamesMap[output]
+      writeDebugLog(8, "punctuationNamesMap match, output now: " + output + "\n")  
+
+    # Check if this is a capital
+    if re.match(r"^[A-Z]+$", output):
+      prefix = prefix + " [[pbas +" + str(capsPitchIncrease) + "]]"
+      suffix = "[[pbas -" + str(capsPitchIncrease) + "]] " + suffix
+
+    # add prefix and suffix to output 
+    output = prefix + " " + output + " " + suffix
+    writeDebugLog(4, "about to speak letter: " + output + "\n")
+    # Send directly to TTS to avoid any line processing.
+    speechSynthesizer.startSpeakingString_(output)
+
+  def handleQueue(self, args):
+    if re.search(r"^(.*)(\[\[voice [a-z]*\]\])(.*)$", args):
+      queueTextWithVoiceCommands(args)
+    else:
+      self.queueContinuationValue = self.queueContinuationValue + args
+      if args.endswith('}'):
+        speechQueue.append(("text", self.queueContinuationValue))
+        self.queueContinuationValue = ""
+        self.isQueueContinuation = False
+      else:
+        self.isQueueContinuation = True
+
+  def handleStopSpeaking(self, args):
+    speechSynthesizer.stopSpeaking()
+    del(speechQueue[:])
+
+  def handleTone(self, args):
+    frequency, length = args.split(' ')
+    frequency = int(frequency)
+    length = int(length)
+    if not frequency or not length:
+      writeDebugLog(4, 'Invalid tone args %i, %i' % (frequency, length))
+      return
+
+    frameRate = 44100
+    nframes = frameRate * length / 1000.
+    frequencyWave = 2 * math.pi * frequency / frameRate
+    # frequencyWave is measured in radians per sample
+
+    e = aifc.open('/tmp/e.aiff', 'w')
+    e.setnchannels(1)
+    e.setsampwidth(2)
+    e.setframerate(44100)
+    e.setnframes(int(nframes))
+    e.writeframesraw(self.buildSineWave(frequencyWave, int(nframes)))
+    e.close()
+
+    icon = NSSound.alloc().initWithContentsOfFile_byReference_('/tmp/e.aiff', True)
+    icon.play()
+
+  def handleTtsSay(self, args):
+    speechSynthesizer.startSpeakingString_('[[rate %i]] %s' % (ttsState['sayRate'], args))
+
+  def handleTtsSetPunctuations(self, args):
+    global ttsState
+    ttsState['punctuationLevel'] = args.strip()
+    writeDebugLog(4, "Setting punctuation level: " +  ttsState['punctuationLevel'])
+  def handleTtsSetSpeechRate(self, args):
+    global ttsState
+    ttsState['speechRate'] = int(args.strip())
+    ttsState['sayRate'] = round(ttsState['speechRate'] * ttsState['charFactor'])
+    writeDebugLog(4, "Setting speech rate: " +  str(ttsState['speechRate']) + " char factor: " + str(ttsState['charFactor']) + " say rate: " + str(ttsState['sayRate']) + "\n")
+
+  def handleTtsSetCharacterScale(self, args):
+    global ttsState
+    ttsState['charFactor'] = float(args.strip())
+    ttsState['sayRate'] = round(ttsState['speechRate'] * ttsState['charFactor'])
+    writeDebugLog(4, "Setting character scale: " + str(ttsState['charFactor']) + " say rate: " + str(ttsState['sayRate']) + "\n")
+
+
+  def handleTtsSyncState(self, args):
+    params = args.split()
+    global ttsState
+    ttsState['punctuationLevel'] = params[0]
+    ttsState['capitalize'] = int(params[1])
+    ttsState['allCaps'] = int(params[2])
+    ttsState['splitCaps'] = int(params[3])
+    ttsState['speechRate'] = int(params[4])
+    writeDebugLog(6, "tts_sync: set punctuation level to: " + ttsState['punctuationLevel'] + " capitalize to " + str(ttsState['capitalize']) + " allcaps " + str(ttsState['allCaps']) + " splitCaps " + str(ttsState['splitCaps']) + " rate to: " + str(ttsState['speechRate']) + "\n")
+
+  def dispatchRawTtsMessage(self, message):
+    self.isProcessing = False
+    writeDebugLog(4, "dispatchRawTtsMessage")
+    chunks = message.split('\n')
+    for chunk in chunks:
+      writeDebugLog(4, "\nchunk: " + chunk + "\nend\n")                      
+      if not chunk:
+        continue
+
+      if self.isQueueContinuation:
+        self.handleQueue(chunk)
+        continue
+
+      # Extract protocol id and protocol args.
+      matcher = re.match(self.protocolRePattern, chunk)
+
+      # Message validation.
+      if not matcher or ( 
+        len(matcher.groups()) != 7):
+        writeDebugLog(4, "Unable to parse pattern " + chunk)
+        continue
+
+      # Note the presence of three types of protocol messages:
+      # 1. containing only id.
+      # 2. containing id and {...} block.
+      # 3. containing id and space delimited args.
+      id = matcher.group('id')
+      blockId = matcher.group('blockId')
+      blockArg = matcher.group('blockArg')
+      spaceId = matcher.group('spaceId')
+      spaceArg = matcher.group('spaceArg')
+
+      # Send off to the handler.
+      if id and self.protocolIdToHandlerMap.has_key(id):
+        self.protocolIdToHandlerMap[id](None)
+      elif (
+        blockId and
+        self.protocolIdToHandlerMap.has_key(blockId)):
+        self.protocolIdToHandlerMap[blockId](blockArg)
+      elif (
+        spaceId and
+        spaceArg and self.protocolIdToHandlerMap.has_key(spaceId)):
+        self.protocolIdToHandlerMap[spaceId](spaceArg)
+      else:
+        print "unable to parse"
+        writeDebugLog(
+          4, "Error! unsupported message id:%s, blockId:%s, blockArg:%s, spaceId:%s, spaceArg:%s" % (
+          id, blockId, blockArg, spaceId, spaceArg))
+
+  def buildSineWave(self, frequency, length):
+    sinewave = bytearray()
+    for i in range(length):
+      val = int(math.sin(i * frequency) * 20000)
+      sinewave.extend([(val >> 8) & 255, val & 255])
+    return bytes(sinewave)
+
+        #TODO:  support protocol commands.
+        #version":
+        #speak tts version
+
+        #tts_pause:
+        #if tts_resume:
+        #sh:
+        #silence for ms.
+        #tts__reset:
+#tts_allcaps_beep flag (beep)
+
+
+# This takes a string with imbedded voice changes and splits it up and queues individual text events with voice changes inbetween.
+def queueTextWithVoiceCommands(text):
+  writeDebugLog(4, "process text with voice commands")
+  while text:
+    # try cleaning out the extra spaces
+    text = text.strip("{} ")
+    matcher = re.match(r"^(?P<first>.*?)\[\[voice (?P<voice>[a-z]*)\]\](?P<rest>.*)$", text)
+    if not matcher:
+      writeDebugLog(8, "no match in string " + text + "\n")
+      break
+    first = matcher.group('first')
+    voice = matcher.group('voice')
+    rest = matcher.group('rest')
+    if first:
+      speechQueue.append(("text", first))
+    speechQueue.append(("voice", voice))
+    writeDebugLog(8, "first: " + first + "\nvoice " + voice + "\nrest " + rest)
+    text = rest
+  if text:
+    writeDebugLog(8, "queueing final chunk " + text)
+    speechQueue.append(("text", text))
+
+
+# Processes speech objects.
+#  format is:
+#  { type, value }
+def processSpeechQueue():
+  # hacky way to work around buggy NSSpeechSynthesizerDelegate
+  speechLock.acquire()
+  if speechSynthesizer.isSpeaking():
+    speechLock.release()
+    return
+  speechLock.release()
+
+  if (len(speechQueue) > 0):
+    item = speechQueue.pop(0)
+    #Text
+    if item[0] == "text":
+      #Basic processing.  TODO: refactor.
+      output = item[1].strip(" {}")
+      if output:
+        output = ProcessSpecialCharacters(output)
+        speechSynthesizer.setRate_(ttsState['speechRate'])
+        speechSynthesizer.startSpeakingString_(output)
+        writeDebugLog(2, "\nsay: " + item[1] + "\nend\n")
+      else:
+        processSpeechQueue()
+    elif item[0] == "voice":
+      writeDebugLog(4, "Voice change")
+      voice = item[1]
+      if voice in voiceMap:
+        speechSynthesizer.setVoice_(voiceMap[voice])
+        writeDebugLog(6, "set voice to " + voiceMap[voice])  
+        processSpeechQueue()
+
+
+def ProcessSpecialCharacters(wordList):
+  punctList = punctuationMap[ttsState['punctuationLevel']]
+
+  expansion = ""
+  for i in range(len(wordList)):
+    if wordList[i] in punctList:
+      expansion += ' ' + (punctuationNamesMap[wordList[i]]) + ' '
+    else:
+      # if we have a cap letter
+      if ttsState['capitalize'] and re.match(r"^[A-Z]+$", wordList[i]):
+        expansion += "[[sync 3]]"
+      expansion += (wordList[i])
+  return expansion
+
+def main():
+  speechSynthesizer.startSpeakingString_("E Mac Speak server")
+  observer = FileObserver.alloc().initWithFileDescriptor_readCallback_errorCallback_(
+        sys.stdin.fileno(), gotLine, gotError)
+  try:
+    AppHelper.runConsoleEventLoop()
+  except KeyboardInterrupt:
+    writeDebugLog(2, "\nKeyboard interrupt")
+  except Exception, err:
+    writeDebugLog(2, "Server crashed:%s" % err)
+
+if __name__ == '__main__':
+  main()
Index: lisp/Makefile
===================================================================
--- lisp/Makefile	(revision 6978)
+++ lisp/Makefile	(working copy)
@@ -60,7 +60,7 @@
 #The various modules:
 DTK_OBJECTS = acss-structure.elc \
 dtk-speak.elc		dectalk-voices.elc\
-outloud-voices.elc multispeech-voices.elc \
+outloud-voices.elc multispeech-voices.elc mac-voices.elc\
 espeak-voices.elc dtk-interp.elc dtk-unicode.elc
 
 SPEAK_OBJECTS =   \
@@ -256,11 +256,6 @@
 
 config: emacspeak-loaddefs.el emacspeak-cus-load.el emacspeak-finder-inf.el
 
-lint:
-	echo "." |\
-emacs -batch -q \
--l advice.el -l emacspeak-load-path.el  -l emacspeak-loaddefs.el \
--f elint-directory 
 # }}}
 # {{{build time target --loaddefs
 
@@ -294,6 +289,7 @@
 dectalk-voices.elc: dectalk-voices.el voice-setup.elc
 outloud-voices.elc: outloud-voices.el voice-setup.elc
 multispeech-voices.elc: multispeech-voices.el voice-setup.elc
+mac-voices.elc: mac-voices.el voice-setup.elc
 espeak-voices.elc: espeak-voices.el voice-setup.elc
 voice-setup.elc: voice-setup.el acss-structure.elc
 emacspeak-alsaplayer.elc: emacspeak-alsaplayer.el
Index: lisp/mac-voices.el
===================================================================
--- lisp/mac-voices.el	(revision 0)
+++ lisp/mac-voices.el	(revision 0)
@@ -0,0 +1,472 @@
+;;; mac-voices.el --- Define various device independent voices in terms of Mac tags
+;;; $Id: mac-voices.el 6342 2009-10-20 19:12:40Z tv.raman.tv $
+;;; $Author: Dave $
+;;; Description:  Module to set up Mac voices and personalities
+;;; Keywords: Voice, Personality, Mac
+;;{{{  LCD Archive entry:
+
+;;; LCD Archive Entry:
+;;; emacspeak| T. V. Raman |raman@cs.cornell.edu
+;;; A speech interface to Emacs |
+;;; $Date: 2008-07-06 10:18:30 -0700 (Sun, 06 Jul 2008) $ |
+;;;  $Revision: 4532 $ |
+;;; Location undetermined
+;;;
+
+;;}}}
+;;{{{  Copyright:
+
+;;;Copyright (C) 1995 -- 2009, T. V. Raman 
+;;; All Rights Reserved.
+;;;
+;;; This file is not part of GNU Emacs, but the same permissions apply.
+;;;
+;;; GNU Emacs is free software; you can redistribute it and/or modify
+;;; it under the terms of the GNU General Public License as published by
+;;; the Free Software Foundation; either version 2, or (at your option)
+;;; any later version.
+;;;
+;;; GNU Emacs is distributed in the hope that it will be useful,
+;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
+;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+;;; GNU General Public License for more details.
+;;;
+;;; You should have received a copy of the GNU General Public License
+;;; along with GNU Emacs; see the file COPYING.  If not, write to
+;;; the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
+
+;;}}}
+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
+
+
+;;; Commentary:
+;;{{{  Introduction:
+
+;;; This module defines the various voices used in voice-lock mode.
+;;; This module is Apple Mac specific.
+
+;;}}}
+;;{{{ Required modules
+
+;;; Code:
+(require 'cl)
+(declaim  (optimize  (safety 0) (speed 3)))
+(require 'acss-structure)
+
+;;}}}
+;;{{{  voice table
+
+(defvar mac-default-voice-string "[[voice alex]]"
+  "Default Mac tag for  default voice.")
+
+(defvar mac-voice-table (make-hash-table)
+  "Association between symbols and strings to set Mac  voices.
+The string can set any voice parameter.")
+
+(defsubst mac-define-voice (name command-string)
+  "Define a Mac  voice named NAME.
+This voice will be set   by sending the string
+COMMAND-STRING to the TTS engine."
+  (declare (special mac-voice-table ))
+  (puthash name command-string mac-voice-table))
+
+(defsubst mac-get-voice-command-internal  (name)
+  "Retrieve command string for  voice NAME."
+  (declare (special mac-voice-table))
+  (cond
+   ((listp name)
+    (mapconcat #'mac-get-voice-command name " "))
+   (t (or  (gethash name mac-voice-table)
+           mac-default-voice-string))))
+
+(defsubst mac-get-voice-command (name)
+  "Retrieve command string for  voice NAME."
+  (declare (special dtk-speech-rate))
+  (concat 
+   (mac-get-voice-command-internal name)))
+;   (format " [[rate %s]] " dtk-speech-rate )))
+
+(defsubst mac-voice-defined-p (name)
+  "Check if there is a voice named NAME defined."
+  (declare (special mac-voice-table ))
+  (gethash name mac-voice-table ))
+
+;;}}}
+;;{{{ voice definitions
+
+;;; the nine predefined voices: TODO: figure out if embedding is possible (and update voice names).
+(mac-define-voice 'paul  " [[voice alex]] ")
+(mac-define-voice 'harry " [[voice ralf]] ")
+(mac-define-voice 'dennis " [[voice bruce]] ")
+(mac-define-voice 'frank " [[voice fred]] ")
+(mac-define-voice 'betty " [[voice victoria]] ")
+(mac-define-voice 'ursula " [[voice kathy]] ")
+(mac-define-voice 'rita " [[voice vicki]] ")
+(mac-define-voice 'wendy " [[voice kathy]] ")
+(mac-define-voice 'kit " [[voice junior]] ")
+
+;;; Modified voices:
+
+;;}}}
+;;{{{  the inaudible voice
+
+(mac-define-voice 'inaudible " ")
+
+;;}}}
+;;{{{  Mapping css parameters to tts codes
+
+;;{{{ voice family codes
+
+(defsubst mac-get-family-code (name)
+  "Get control code for voice family NAME."
+  (mac-get-voice-command-internal name))
+
+;;}}}
+;;{{{  hash table for mapping families to their dimensions
+
+(defvar mac-css-code-tables (make-hash-table)
+  "Hash table holding vectors of mac codes.
+Keys are symbols of the form <FamilyName-Dimension>.
+Values are vectors holding the control codes for the 10 settings.")
+
+(defsubst mac-css-set-code-table (family dimension table)
+  "Set up voice FAMILY.
+Argument DIMENSION is the dimension being set,
+and TABLE gives the values along that dimension."
+  (declare (special mac-css-code-tables))
+  (let ((key (intern (format "%s-%s" family dimension))))
+    (puthash key table mac-css-code-tables )))
+
+(defsubst mac-css-get-code-table (family dimension)
+  "Retrieve table of values for specified FAMILY and DIMENSION."
+  (declare (special mac-css-code-tables))
+  (let ((key (intern (format "%s-%s" family dimension))))
+    (gethash key mac-css-code-tables)))
+
+;;}}}
+;;{{{ volume
+
+(defvar mac-gain-table (make-vector  10 "")
+  "Maps CSS volume settings to actual synthesizer codes.")
+
+;;}}}
+;;{{{  average pitch
+
+;;; Average pitch for standard male voice is 65 --this is mapped to
+;;; a setting of 5.
+;;; Average pitch varies inversely with speaker head size --a child
+;;; has a small head and a higher pitched voice.
+;;; We change parameter head-size in conjunction with average pitch to
+;;; produce a more natural change on the TTS engine.
+
+;;{{{  paul average pitch
+
+(let ((table (make-vector 10 "")))
+  (mapcar
+   (function
+    (lambda (setting)
+      (aset table
+            (first setting)
+            (format " [[pbas %s]] "
+                    (second setting)
+                    (third setting)))))
+   '(
+     (0 44 52)
+     (1 50 58 )
+     (2 56 56)
+     (3 58 54)
+     (4 62 52  )
+     (5 65 50)
+     (6 69 48)
+     (7 73 46 )
+     (8 77 44)
+     (9 82 40)))
+  (mac-css-set-code-table 'paul 'average-pitch table ))
+
+;;}}}
+;;{{{  harry average pitch
+
+(let ((table (make-vector 10 "")))
+
+  (mapcar
+   (function
+    (lambda (setting)
+      (aset table
+            (first setting)
+            (format " pitch %s"
+                    (second setting)
+                    (third setting)))))
+   '(
+     (0 0 90)
+     (1 10 85 )
+     (2 20 80)
+     (3 30 70)
+     (4 40 60)
+     (5 50 60)
+     (6 60 50)
+     (7 70 40 )
+     (8 80 30)
+     (9 90 20)))
+  (mac-css-set-code-table 'harry 'average-pitch table ))
+
+;;}}}
+;;{{{  betty average pitch
+
+;;;defalt baseline is average pitch of 81 
+
+(let ((table (make-vector 10 "")))
+  (mapcar
+   (function
+    (lambda (setting)
+      (aset table
+            (first setting)
+            (format " [[pbas %s]] "
+                    (second setting)
+                    (third setting)))))
+   '(
+     (0 5 70)
+     (1 17 66)
+     (2 33 62)
+     (3 49 58)
+     (4 65 54 )
+     (5 81  50)
+     (6 85 55)
+     (7 89  60)
+     (8 93 65)
+     (9 97 69)))
+  (mac-css-set-code-table 'betty 'average-pitch table ))
+
+;;}}}
+
+(defsubst mac-get-average-pitch-code (value family)
+  "Get  AVERAGE-PITCH for specified VALUE and  FAMILY."
+  (or family (setq family 'paul))
+  (if value 
+      (aref (mac-css-get-code-table family 'average-pitch)
+            value)
+    ""))
+
+;;}}}
+;;{{{  pitch range
+
+;;;  Standard pitch range is 30 and is  mapped to
+;;; a setting of 5.
+;;; A value of 0 produces a flat monotone voice --maximum value of 100
+;;; produces a highly animated voice.
+
+;;{{{  paul pitch range
+
+(let ((table (make-vector 10 "")))
+  (mapcar
+   (function
+    (lambda (setting)
+      (aset table
+            (first setting)
+            (format " [[pbas %s]] "
+                    (second setting)))))
+   '(
+     (0 0 )
+     (1 10 )
+     (2  18)
+     (3  25)
+     (4  35 )
+     (5  44 )
+     (6  48)
+     (7  54)
+     (8  60)
+     (9  67)))
+  (mac-css-set-code-table 'paul 'pitch-range table ))
+
+;;}}}
+;;{{{  harry pitch range
+
+(let ((table (make-vector 10 "")))
+  (mapcar
+   (function
+    (lambda (setting)
+      (aset table
+            (first setting)
+            (format " `vf%s  "
+                    (second setting)))))
+   '(
+     (0 0 )
+     (1 5 )
+     (2  15)
+     (3  20)
+     (4  25 )
+     (5  30 )
+     (6  47)
+     (7  64)
+     (8  81)
+     (9  100)))
+  (mac-css-set-code-table 'harry 'pitch-range table ))
+
+;;}}}
+;;{{{  betty pitch range
+
+(let ((table (make-vector 10 "")))
+  (mapcar
+   (function
+    (lambda (setting)
+      (aset table
+            (first setting)
+            (format " `vf%s  "
+                    (second setting)))))
+   '(
+     (0 0 )
+     (1 5 )
+     (2  15)
+     (3  20)
+     (4  25 )
+     (5  30 )
+     (6  47)
+     (7  64)
+     (8  81)
+     (9  100)))
+  (mac-css-set-code-table 'betty 'pitch-range table ))
+
+;;}}}
+(defsubst mac-get-pitch-range-code (value family)
+  "Get pitch-range code for specified VALUE and FAMILY."
+  (or family (setq family 'paul))
+  (if value 
+      (aref (mac-css-get-code-table family 'pitch-range)
+            value)
+    ""))
+
+;;}}}
+;;{{{  stress
+
+;;; On the mac we map stress to roughness
+;;; we also use stress markers `00 .. `4 
+;;{{{  paul stress TODO
+
+(let ((table (make-vector 10 "")))
+  (mapcar
+   #'(lambda (setting)
+       (aset table (first setting)
+             (format " "
+                     (second setting))))
+;;; stress markers not used for now.
+   '(
+     (0 0 "`00")
+     (1 5 "`00")
+     (2  10 "`0")
+     (3  15 "`0")
+     (4  20 "`1" )
+     (5  25 "`1" )
+     (6  30 "`v2")
+     (7  35 "`v2")
+     (8  40 "`v3")
+     (9  45 "`v4")))
+  (mac-css-set-code-table 'paul 'stress table)
+  (mac-css-set-code-table 'harry 'stress table)
+  (mac-css-set-code-table 'betty  'stress table))
+
+;;}}}
+(defsubst mac-get-stress-code (value family)
+  (or family (setq family 'paul ))
+  (if value 
+      (aref (mac-css-get-code-table family 'stress)
+            value)
+    ""))
+
+;;}}}
+;;{{{  richness
+
+;;{{{  paul richness TODO
+
+(let ((table (make-vector 10 "")))
+  (mapcar
+   (function
+    (lambda (setting)
+      (aset table
+            (first setting)
+            (format "  "
+                    (second setting)
+                    (third setting)))))
+   '(
+     (0 0 60)
+     (1 4 78)
+     (2 8 80)
+     (3 12 84)
+     (4 16 88)
+     (5 20 92)
+     (6 24 93)
+     (7 28 95)
+     (8 32 97 )
+     (9 36 100)))
+  (mac-css-set-code-table 'paul 'richness table)
+  (mac-css-set-code-table 'harry 'richness table)
+  (mac-css-set-code-table 'betty 'richness table))
+
+;;}}}
+
+(defsubst mac-get-richness-code (value family)
+  (or family (setq family 'paul))
+  (if value 
+      (aref (mac-css-get-code-table family 'richness)
+            value)
+    ""))
+
+;;}}}
+;;{{{  punctuations
+
+(defsubst mac-get-punctuations-code (value)
+  "Return string needed to set specified punctuations mode."
+  "")
+
+;;}}}
+;;}}}
+;;{{{  mac-define-voice-from-speech-style
+
+(defun mac-define-voice-from-speech-style (name style)
+  "Define NAME to be a mac voice as specified by settings in STYLE."
+  (let* ((family(acss-family style))
+         (command
+          (concat 
+           (mac-get-family-code family)
+           (mac-get-punctuations-code (acss-punctuations style))
+           (mac-get-average-pitch-code (acss-average-pitch style) family)
+           (mac-get-pitch-range-code (acss-pitch-range style) family)
+           (mac-get-stress-code (acss-stress style ) family)
+           (mac-get-richness-code (acss-richness style) family))))
+    (mac-define-voice name command)))
+
+;;}}}
+;;{{{ list voices 
+
+(defun mac-list-voices ()
+  "List defined voices."
+  (declare (special mac-voice-table))
+  (loop for k being the hash-keys of mac-voice-table 
+        collect   k))
+
+;;}}}
+;;{{{ Configurater 
+
+(defun mac-configure-tts ()
+  "Configure TTS environment to use mac  family of synthesizers."
+  (declare (special tts-default-speech-rate
+                    mac-default-speech-rate
+                    dtk-speaker-process))
+  (fset 'tts-list-voices'mac-list-voices)
+  (fset 'tts-voice-defined-p 'mac-voice-defined-p)
+  (fset 'tts-get-voice-command 'mac-get-voice-command)
+  (fset 'tts-define-voice-from-speech-style 'mac-define-voice-from-speech-style)
+  (setq tts-default-speech-rate mac-default-speech-rate)
+  (set-default 'tts-default-speech-rate
+               mac-default-speech-rate)
+  (dtk-unicode-update-untouched-charsets '(ascii latin-iso8859-1 latin-iso8859-15 latin-iso8859-9 eight-bit-graphic)))
+
+;;}}}
+(provide 'mac-voices)
+;;{{{  emacs local variables
+
+;;; local variables:
+;;; folded-file: t
+;;; byte-compile-dynamic: t
+;;; byte-compile-dynamic: t
+;;; end:
+
+;;}}}
Index: lisp/emacspeak-setup.el
===================================================================
--- lisp/emacspeak-setup.el	(revision 6978)
+++ lisp/emacspeak-setup.el	(working copy)
@@ -135,6 +135,12 @@
   :type 'integer)
 
 ;;;###autoload
+(defcustom mac-default-speech-rate 225
+  "Default speech rate for mac."
+  :group 'tts
+  :type 'integer)
+
+;;;###autoload
 (defcustom multispeech-default-speech-rate 225
   "Default speech rate for multispeech."
   :group 'tts
Index: lisp/dtk-speak.el
===================================================================
--- lisp/dtk-speak.el	(revision 6978)
+++ lisp/dtk-speak.el	(working copy)
@@ -60,6 +60,7 @@
 (require 'dectalk-voices)
 (require 'outloud-voices)
 (require 'multispeech-voices)
+(require 'mac-voices)
 (require 'espeak-voices)
 (require 'flite-voices)
 
@@ -67,7 +68,7 @@
 ;;{{{ Forward Declarations:
 (declare-function emacspeak-auditory-icon "emacspeak-sounds.el" (icon))
 (declare-function emacspeak-queue-auditory-icon "emacspeak-sounds.el" (icon))
-
+ 
 (defvar emacspeak-pronounce-pronunciation-table)
 (defvar emacspeak-ssh-tts-server )
 (defvar emacspeak-auditory-icon-function )
@@ -1542,6 +1543,8 @@
     (outloud-configure-tts))
    ((string-match "multispeech" tts-name)
     (multispeech-configure-tts))
+   ((string-match "mac" tts-name)
+    (mac-configure-tts))
    ((string-match "espeak" tts-name)
     (espeak-configure-tts))
    ((string-match "dtk-" tts-name)      ;all dectalks
Index: lisp/voice-setup.el
===================================================================
--- lisp/voice-setup.el	(revision 6978)
+++ lisp/voice-setup.el	(working copy)
@@ -94,6 +94,7 @@
 (require 'acss-structure)
 (require 'outloud-voices)
 (require 'multispeech-voices)
+(require 'mac-voices)
 (require 'espeak-voices)
 (require 'dectalk-voices)
 ;;}}}
Index: Makefile
===================================================================
--- Makefile	(revision 6978)
+++ Makefile	(working copy)
@@ -174,6 +174,7 @@
 servers/dtk-exp  servers/ssh-dtk-exp\
 servers/dtk-soft \
 servers/espeak \
+servers/mac \
 servers/outloud  servers/ssh-outloud servers/32-outloud \
 servers/tts-lib.tcl \
 servers/speech-server
